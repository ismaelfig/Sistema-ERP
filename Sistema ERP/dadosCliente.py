# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dadosCliente.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

###IMPORTS SISTEMA###
import mysql.connector
import pandas as pd

### ARQUIVOS VARIAVEIS DE CONTROLE###
import variaveisControle

###VARIAVEIS DE CONEXÃO COM BANCO DE DADOS###
host = variaveisControle.host
user = variaveisControle.user
password = variaveisControle.password
database = variaveisControle.database

class Ui_forDadosCliente(object):
    def setupUi(self, forDadosCliente):
        forDadosCliente.setObjectName("forDadosCliente")
        forDadosCliente.resize(367, 275)
        self.lb_endereco = QtWidgets.QLabel(forDadosCliente)
        self.lb_endereco.setGeometry(QtCore.QRect(20, 150, 47, 21))
        self.lb_endereco.setObjectName("lb_endereco")
        self.lb_telefone = QtWidgets.QLabel(forDadosCliente)
        self.lb_telefone.setGeometry(QtCore.QRect(20, 70, 47, 16))
        self.lb_telefone.setObjectName("lb_telefone")
        self.lb_nome = QtWidgets.QLabel(forDadosCliente)
        self.lb_nome.setGeometry(QtCore.QRect(26, 30, 41, 21))
        self.lb_nome.setObjectName("lb_nome")
        self.lb_cidade = QtWidgets.QLabel(forDadosCliente)
        self.lb_cidade.setGeometry(QtCore.QRect(20, 110, 51, 21))
        self.lb_cidade.setObjectName("lb_cidade")
        self.txt_nome = QtWidgets.QLineEdit(forDadosCliente)
        self.txt_nome.setGeometry(QtCore.QRect(70, 30, 241, 20))
        self.txt_nome.setObjectName("txt_nome")
        self.txt_telefone = QtWidgets.QLineEdit(forDadosCliente)
        self.txt_telefone.setGeometry(QtCore.QRect(70, 70, 241, 20))
        self.txt_telefone.setObjectName("txt_telefone")
        self.txt_cidade = QtWidgets.QLineEdit(forDadosCliente)
        self.txt_cidade.setGeometry(QtCore.QRect(70, 110, 241, 20))
        self.txt_cidade.setObjectName("txt_cidade")
        self.txt_endereco = QtWidgets.QLineEdit(forDadosCliente)
        self.txt_endereco.setGeometry(QtCore.QRect(70, 150, 241, 20))
        self.txt_endereco.setObjectName("txt_endereco")
        self.bt_cancelar = QtWidgets.QPushButton(forDadosCliente)
        self.bt_cancelar.setGeometry(QtCore.QRect(80, 190, 81, 61))
        self.bt_cancelar.setStyleSheet("image: url(:/icon_cancelar/icons/cancelar.png)")
        self.bt_cancelar.setText("")
        self.bt_cancelar.setObjectName("bt_cancelar")
        self.bt_cadastrar = QtWidgets.QPushButton(forDadosCliente)
        self.bt_cadastrar.setGeometry(QtCore.QRect(200, 190, 81, 61))
        self.bt_cadastrar.setStyleSheet("image:url(:/icon_cadastrar/icons/cadastrar.png)")
        self.bt_cadastrar.setText("")
        self.bt_cadastrar.setObjectName("bt_cadastrar")

        self.retranslateUi(forDadosCliente)
        QtCore.QMetaObject.connectSlotsByName(forDadosCliente)

    def retranslateUi(self, forDadosCliente):
        _translate = QtCore.QCoreApplication.translate
        forDadosCliente.setWindowTitle(_translate("forDadosCliente", "Form"))
        self.lb_endereco.setText(_translate("forDadosCliente", "Endereço"))
        self.lb_telefone.setText(_translate("forDadosCliente", "Telefone"))
        self.lb_nome.setText(_translate("forDadosCliente", "Nome"))
        self.lb_cidade.setText(_translate("forDadosCliente", "Cidade"))
        self.bt_cancelar.setToolTip(_translate("forDadosCliente", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_cadastrar.setToolTip(_translate("forDadosCliente", "<html><head/><body><p><br/></p></body></html>"))

         ###Botões do Sistema###
        self.bt_cancelar.clicked.connect(lambda: self.sairTela(forDadosCliente))
        if variaveisControle.tipoTelaDadosCliente == 'incluir':
            self.bt_cadastrar.clicked.connect(self.cadastrarCliente)
        if variaveisControle.tipoTelaDadosCliente == 'alterar':
            self.bt_cadastrar.clicked.connect(self.alterarCliente)

        ###Condições de Tela###
        ##Tipo de Tela##
        if variaveisControle.tipoTelaDadosCliente == 'incluir':
            print('dadosCliente:', variaveisControle.tipoTelaDadosCliente)
            self.txt_nome.setEnabled(True)
            self.txt_telefone.setEnabled(True)
            self.txt_cidade.setEnabled(True)
            self.txt_endereco.setEnabled(True)
            self.bt_cadastrar.setEnabled(True)
        elif variaveisControle.tipoTelaDadosCliente == 'consultar':
            print('dadosCliente:', variaveisControle.tipoTelaDadosCliente)
            self.txt_nome.setEnabled(False)
            self.txt_telefone.setEnabled(False)
            self.txt_cidade.setEnabled(False)
            self.txt_endereco.setEnabled(False)
            self.bt_cadastrar.setEnabled(False)

            #Conexão com banco de dados#
            mydb = mysql.connector.connect(
                host=host,
                user=user,
                password=password,
                database=database
            )
            mycursor = mydb.cursor()
            consultaSQL = "SELECT * FROM cliente WHERE idCliente = '" + variaveisControle.idConsulta + "'"
            mycursor.execute(consultaSQL)
            myresult = mycursor.fetchall()
            mycursor.close()
            # Converte resultado ID para DataFrame#
            df = pd.DataFrame(myresult, columns=['ID', 'Nome', 'Telefone', 'Cidade', 'Endereco'])
            nomeCliente = df['Nome'][0]
            telefoneCliente = df['Telefone'][0]
            cidadeCliente = df['Cidade'][0]
            enderecoCliente = df['Endereco'][0]
            #Seta variáveis na tela cliente#
            self.txt_nome.setText(nomeCliente)
            self.txt_telefone.setText(telefoneCliente)
            self.txt_cidade.setText(cidadeCliente)
            self.txt_endereco.setText(enderecoCliente)
        elif variaveisControle.tipoTelaDadosCliente == 'alterar':
            print('dadosCliente: ', variaveisControle.tipoTelaDadosCliente)
            self.txt_nome.setEnabled(True)
            self.txt_telefone.setEnabled(True)
            self.txt_cidade.setEnabled(True)
            self.txt_endereco.setEnabled(True)
            self.bt_cadastrar.setEnabled(True)
            # Conexão com o banco de dados #
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = database
            )
            mycursor = mydb.cursor()
            consultaSQL = "SELECT * FROM cliente WHERE IdCliente = '" + variaveisControle.idConsulta + "'"
            mycursor.execute(consultaSQL)
            myresult = mycursor.fetchall()
            mycursor.close()
            # Converte resultados BD para DataFrame #
            df = pd.DataFrame(myresult, columns = ['ID', 'Nome', 'Telefone', 'Cidade', 'Endereco'])
            nomeCliente = df['Nome'][0]
            telefoneCliente = df['Telefone'][0]
            cidadeCliente = df['Cidade'][0]
            enderecoCliente = df['Endereco'][0]
            # Seta variáveis na tela do sistema #
            self.txt_nome.setText(nomeCliente)
            self.txt_telefone.setText(telefoneCliente)
            self.txt_cidade.setText(cidadeCliente)
            self.txt_endereco.setText(enderecoCliente)


    ###FUNÇÕES DO SISTEMA###
    ##SAIR DADOS CLIENTE##
    def sairTela(self, forDadosCliente):
        variaveisControle.tipoTelaDadosCliente = ''
        forDadosCliente.close()

    ##CADASTRA CLIENTE##
    def cadastrarCliente(self):
        nomeCliente = self.txt_nome.text()
        telefoneCliente = self.txt_telefone.text()
        cidadeCliente = self.txt_cidade.text()
        enderecoCliente = self.txt_endereco.text()

        mydb = mysql.connector.connect(
            host= host,
            user= user,
            password= password,
            database= database
        )

        mycursor = mydb.cursor()
        sql = "INSERT INTO cliente (Nome, Telefone, Cidade, Endereco) values (%s, %s, %s, %s)"
        val = (nomeCliente, telefoneCliente, cidadeCliente, enderecoCliente)
        mycursor.execute(sql, val)
        mydb.commit()

        print(mycursor.rowcount, 'record(s) inserted')
        mycursor.close()
        self.txt_nome.setText("")
        self.txt_telefone.setText("")
        self.txt_cidade.setText("")
        self.txt_endereco.setText("")
    ## ALTERAR CLIENTE ##
    def alterarCliente(self):
        nomeCliente = self.txt_nome.text()
        telefoneCliente = self.txt_telefone.text()
        cidadeCliente = self.txt_cidade.text()
        enderecoCliente = self.txt_endereco.text()

        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = database
        )

        mycursor = mydb.cursor()
        sql = "UPDATE cliente SET Nome = '" + nomeCliente + "', Telefone = '" + telefoneCliente + "', Cidade = '" + cidadeCliente + "', Endereco = '" + enderecoCliente + "' WHERE IdCliente = '" + variaveisControle.idConsulta + "'"
        mycursor.execute(sql)
        mydb.commit()
        print(mycursor.rowcount, 'record(s) altered')
        mycursor.close()

###Imagens Sistema###
import icon_cadastrar
import icon_cancelar


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    forDadosCliente = QtWidgets.QWidget()
    ui = Ui_forDadosCliente()
    ui.setupUi(forDadosCliente)
    forDadosCliente.show()
    sys.exit(app.exec_())
